apiVersion: kubeflow.org/v1
kind: Notebook
metadata:
  annotations:
    notebooks.opendatahub.io/inject-oauth: "true"
    notebooks.opendatahub.io/last-image-selection: "{{ .Values.lastImageSelection }}"
    notebooks.opendatahub.io/last-size-selection: "{{ .Values.lastSizeSelection }}"
    notebooks.opendatahub.io/oauth-logout-url: "https://rhods-dashboard-redhat-ods-applications.{{ .Values.clusterurl }}/projects/{{ .Values.project }}?notebookLogout={{ .Values.workbenchName }}"
    {{- if .Values.accelerator.enable }}
    opendatahub.io/accelerator-name: "{{ .Values.accelerator.name }}"
    {{- end }}
    opendatahub.io/image-display-name: "{{ .Values.imageDisplayName }}"
    opendatahub.io/username: admin
    openshift.io/description: "{{ .Values.workbenchName }}"
    openshift.io/display-name: "{{ .Values.workbenchName }}"
    backstage.io/kubernetes-id: "{{ .Values.workbenchName }}"
  generation: 1
  labels:
    app: "{{ .Values.workbenchName }}"
    opendatahub.io/dashboard: "true"
    opendatahub.io/odh-managed: "true"
    opendatahub.io/user: admin
  name: "{{ .Values.workbenchName }}"
  namespace: "{{ .Values.project }}"
spec:
  template:
    spec:
      affinity: {}
      containers:
      - env:
        - name: NOTEBOOK_ARGS
          value: |-
            --ServerApp.port=8888
            --ServerApp.token=''
            --ServerApp.password=''
            --ServerApp.base_url=/notebook/{{ .Values.project }}/{{ .Values.workbenchName }}
            --ServerApp.quit_button=False
            --ServerApp.tornado_settings={"user":"admin","hub_host":"https://rhods-dashboard-redhat-ods-applications.{{ .Values.clusterurl }}","hub_prefix":"/projects/{{ .Values.project }}"}
        - name: JUPYTER_IMAGE
          value: "{{ .Values.jupyterImage }}"
        envFrom:
        - secretRef:
            name: {{ .Values.secretName }}
        - configMapRef:
            name: {{ .Values.cmName }}
        image: "{{ .Values.jupyterImage }}"
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /notebook/{{ .Values.project }}/{{ .Values.workbenchName }}/api
            port: notebook-port
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        name: "{{ .Values.workbenchName }}"
        ports:
        - containerPort: 8888
          name: notebook-port
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /notebook/{{ .Values.project }}/{{ .Values.workbenchName }}/api
            port: notebook-port
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "{{ .Values.cpuLimit }}"
            memory: {{ .Values.memoryLimit }}
            nvidia.com/gpu: {{ .Values.gpu }}
          requests:
            cpu: "{{ .Values.cpuRequest }}"
            memory: {{ .Values.memoryRequest }}
            nvidia.com/gpu: {{ .Values.gpu }}
        volumeMounts:
        - mountPath: /opt/app-root/src
          name: "{{ .Values.workbenchName }}"
        - mountPath: /dev/shm
          name: shm
        workingDir: /opt/app-root/src
      - args:
        - --provider=openshift
        - --https-address=:8443
        - --http-address=
        - --openshift-service-account={{ .Values.workbenchName }}
        - --cookie-secret-file=/etc/oauth/config/cookie_secret
        - --cookie-expire=24h0m0s
        - --tls-cert=/etc/tls/private/tls.crt
        - --tls-key=/etc/tls/private/tls.key
        - --upstream=http://localhost:8888
        - --upstream-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        - --email-domain=*
        - --skip-provider-button
        - --openshift-sar={"verb":"get","resource":"notebooks","resourceAPIGroup":"kubeflow.org","resourceName":"{{ .Values.workbenchName }}","namespace":"$(NAMESPACE)"}
        - --logout-url="https://rhods-dashboard-redhat-ods-applications.{{ .Values.clusterurl }}/projects/{{ .Values.project }}?notebookLogout={{ .Values.workbenchName }}"
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: "{{ .Values.oauthProxyImage }}"
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /oauth/healthz
            port: oauth-proxy
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        name: oauth-proxy
        ports:
        - containerPort: 8443
          name: oauth-proxy
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /oauth/healthz
            port: oauth-proxy
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: "100m"
            memory: 64Mi
          requests:
            cpu: "100m"
            memory: 64Mi
        volumeMounts:
        - mountPath: /etc/oauth/config
          name: oauth-config
        - mountPath: /etc/tls/private
          name: tls-certificates
      enableServiceLinks: false
      serviceAccountName: {{ .Values.workbenchName }}
      volumes:
      - name: {{ .Values.workbenchName }}
        persistentVolumeClaim:
          claimName: {{ .Values.workbenchName }}
      - emptyDir:
          medium: Memory
        name: shm
      - name: oauth-config
        secret:
          defaultMode: 420
          secretName: '{{ .Values.workbenchName }}-oauth-config'
      - name: tls-certificates
        secret:
          defaultMode: 420
          secretName: '{{ .Values.workbenchName }}-tls'
